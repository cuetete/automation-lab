//###########################################################################
//
// 功能:   I/O口实现12864液晶显示功能；

// 描述:  在液晶中显示‘零零电子’名；
// 
//
//     使用GPIO0-GPIO9，液晶与其对应的引脚如下所示：
//
//        RS--GPIO0引脚，R/W--GND，EN--GPIO1引脚,D0--GPIO2引脚
//        D1--GPIO3引脚,D2--GPIO4引脚,D3--GPIO5引脚,D4--GPIO6引脚
//       D5--GPIO7引脚,D6--GPIO8引脚,D7--GPIO9引脚;

//    根据在RAM中调试的需要，这个项目配置成"boot to SARAM".280x引导模式
//    表如下显示. 常用的还有"boot to Flash"模式，当程序在RAM调试完善后就
//    可以将代码烧进Flash中并使用"boot to Flash"引导模式.
//
//        Boot      GPIO18     GPIO29    GPIO34
//        Mode      SPICLKA    SCITXDA
//                  SCITXB
//        -------------------------------------
//        Flash       1          1        1
//        SCI-A       1          1        0
//        SPI-A       1          0        1
//        I2C-A       1          0        0
//        ECAN-A      0          1        1        
//        SARAM       0          1        0  <- "boot to SARAM"
//        OTP         0          0        1
//        I/0         0          0        0 
//
// 
//###########################################################################
// 释放日期: 2013.1.17
//###########################################################################


#include "DSP2833x_Device.h"     // DSP2833x Headerfile Include File
#include "DSP2833x_Examples.h"   // DSP2833x Examples Include File

/***************全局变量定义****************/
#define uchar unsigned char

/****************端口宏定义*****************/
#define LCD_RS GpioDataRegs.GPADAT.bit.GPIO0
#define LCD_EN GpioDataRegs.GPADAT.bit.GPIO1
#define LCD_DB GpioDataRegs.GPADAT.all

// 使用前，声明本文件中的相关函数
void Init_Port(void);
void LCD_init(void);                          //初始化函数
void LCD_write_command(uchar command);        //写指令函数
void LCD_write_data(uchar dat);               //写数据函数

void main(void)
{
uchar i;
// 步骤 1. 初始化系统控制:
// 设置PLL, WatchDog, 使能外设时钟
// 下面这个函数可以从DSP280x_SysCtrl.c文件中找到.
   InitSysCtrl();

// 步骤 2. 初始化通用输入输出多路复用器GPIO: 
// 这个函数在DSP280x_Gpio.c源文件中被定义了
// 这个函数使GPIO控制类寄存器初始化到默认状态
// InitGpio();  // Skipped for this example  

//本例仅初始化液晶对应的GPIO引脚；
//这些函数在DSP280x_EPwm.c文件里面
   Init_Port();


// 步骤 3. 清除所有中断,初始化中断向量表:
// 禁止CPU全局中断
   DINT;

// 初始化PIE控制寄存器到他们的默认状态.
// 这个默认状态就是禁止PIE中断及清除所有PIE中断标志 
// 这个函数放在DSP280x_PieCtrl.c源文件里
   InitPieCtrl();
   
// 禁止CPU中断和清除所有CPU中断标志 
   IER = 0x0000;
   IFR = 0x0000;

//初始化PIE中断向量表，并使其指向中断服务子程序（ISR）
// 这些中断服务子程序被放在了DSP280x_DefaultIsr.c源文件中
// 这个函数放在了DSP280x_PieVect.c源文件里面.
   InitPieVectTable();

// 步骤 4.初始化片内外设:
// InitPeripherals();  // Not required for this example


   
// 步骤 5. 以下是用户编写的指定代码, 使能相关中断:


// 步骤 6. 循环函数，显示字符串:
   for(;;)
   {  	   
     LCD_init();
	 LCD_write_command(0x80);  //0x80 0x90 0x88 0x98
	 LCD_write_data('D');      
     LCD_write_data('E'); 
     LCD_write_data(' '); 
     LCD_write_data('L'); 
     LCD_write_data('O'); 
     LCD_write_data('R'); 
     LCD_write_data('E'); 
     LCD_write_data('N'); 
     LCD_write_data('Z'); 
     LCD_write_data('O'); 
     
     LCD_write_command(0x90);
     LCD_write_data('D');      
     LCD_write_data('L'); 
     LCD_write_data(' '); 
     LCD_write_data('3'); 
     LCD_write_data('1'); 
     LCD_write_data('5'); 
     LCD_write_data('5'); 
     LCD_write_data('E'); 
     LCD_write_data('2'); 
     LCD_write_data('6'); 
     while(1);
   }

} 

/*------------------------------------------*/
/*形式参数：void                            */
/*返回值:void				                */
/*函数描述:初始化gpio端口               */
/*------------------------------------------*/ 
void Init_Port(void)
{
	EALLOW;   
// 用户根据需要可以使能内部上拉或禁止. 
// 其他不需要的行注释掉；
    GpioCtrlRegs.GPAPUD.bit.GPIO0 = 0;    // 使能GPIO1 引脚内部上拉
    GpioCtrlRegs.GPAPUD.bit.GPIO1 = 1;   // 禁止GPIO1 引脚内部上拉
   
/* 通过I/O功能选择寄存器配置通用I/O功能*/
    GpioCtrlRegs.GPAMUX1.all = 0;   // 配置GPIO0-GPIO15为通用I/O口
	GpioCtrlRegs.GPAMUX2.bit.GPIO24 = 0;   // 配置GPIO24为通用I/O口

/* 设置I/O口为输入引脚*/
    GpioCtrlRegs.GPADIR.all = 0x10003FF;// 配置GPIO0-GPIO9  GPIO24为输出引脚
	
// 每个输入口可以有不同的输入限定
   // a) 输入与系统时钟 SYSCLKOUT同步
   // b) 输入被指定的采样窗口限定
   // c) 输入异步 (仅对外设输入有效)
   GpioCtrlRegs.GPAQSEL1.all = 0x0000;    // GPIO0-GPIO15与系统时钟SYSCLKOUT 同步
   GpioCtrlRegs.GPAQSEL2.all = 0x0000;    // GPIO24与系统时钟SYSCLKOUT 同步
//输出数据LCD_RS置1和LCD_EN清零  
   GpioDataRegs.GPADAT.bit.GPIO0 = 1;
   GpioDataRegs.GPADAT.bit.GPIO1 = 0;
   GpioDataRegs.GPADAT.bit.GPIO24 = 0;  //cs=0
   EDIS;
} 

/*-------------------------------------- 
;模块名称:LCD_write_command(); 
;功    能:LCD1602写指令函数 
;参数说明:command为写命令参数
;-------------------------------------*/ 
void LCD_write_command(uchar command)
{
LCD_RS=0;         //指令
LCD_EN=1;          //允许
LCD_DB=(command<<2)|0x0002;//赋值给D0-D7对应的GPIO4-GPIO11引脚
DELAY_US(10000); 
LCD_EN=0;
DELAY_US(100);

}

/*-------------------------------------- 
;模块名称:LCD_write_data(); 
;功    能:LCD1602写数据函数 
;占用资源: P2.0--RS(LCD_RS),P2.1--RW(LCD_RW),P2.2--E(LCD_E).
;参数说明:dat为写数据参数
;-------------------------------------*/
void LCD_write_data(uchar dat)
{
LCD_RS=1;         //指令
LCD_EN=1;          //允许
LCD_DB=(dat<<2)|0x0003;//赋值给D0-D7对应的GPIO4-GPIO11引脚
DELAY_US(10000); 
LCD_EN=0; 
DELAY_US(100);
}
/*-------------------------------------- 
;模块名称:LCD_init(); 
;功    能:初始化LCD1602 
;占用资源:--
;参数说明:--
;-------------------------------------*/ 
void LCD_init(void)
{
DELAY_US(100000);//延迟100ms
LCD_write_command(0x30);//功能设置
DELAY_US(200);//延迟200us
LCD_write_command(0x30);//功能设置
DELAY_US(200);//延迟200us
LCD_write_command(0x0c);//显示开关控制
DELAY_US(200);//延迟200us
LCD_write_command(0x01);//显示清除
DELAY_US(12000);//延迟12ms
LCD_write_command(0x06);//显示清除
DELAY_US(500);//延迟500us
}



//===========================================================================
// No more.
//===========================================================================
