// DESCRIPTION:
//
//    Install CH372 driver and connect board with PC via USBA-B cable
//    Press K2 to input 'u' as a general keyboard
//    Press K1 to move cursor left as a general mouse
//
//###########################################################################


#include "DSP2833x_Device.h"     // DSP2833x Headerfile Include File
#include "DSP2833x_Examples.h"   // DSP2833x Examples Include File

void InitEPwm1Example(void);
interrupt void epwm1_isr(void);
void Scan_Key(void);
void Manage_Up(void);
void Manage_Down(void);
void Motor_Drive(void);
void Init_Port(void);

Uint16 temp=0; 
Uint16 Direction=0;  // Rotation  direction


#define EPWM1_TIMER_TBPRD  3750  // Period
#define EPWM1_MAX_CMPA     3700
#define EPWM1_MIN_CMPA       0
#define EPWM1_MAX_CMPB     3700
#define EPWM1_MIN_CMPB       0
/****************端口宏定义*****************/
#define Up_Key GpioDataRegs.GPADAT.bit.GPIO16
#define Down_Key GpioDataRegs.GPADAT.bit.GPIO17
#define Direction_Key GpioDataRegs.GPADAT.bit.GPIO12



void main(void)
{
// Step 1. Initialize System Control:
// PLL, WatchDog, enable Peripheral Clocks
// This example function is found in the DSP2833x_SysCtrl.c file.
   InitSysCtrl();

// Step 2. Initalize GPIO:
// This example function is found in the DSP2833x_Gpio.c file and
// illustrates how to set the GPIO to it's default state.
// InitGpio();  // Skipped for this example

// For this case just init GPIO pins for ePWM1, ePWM2, ePWM3
// These functions are in the DSP2833x_EPwm.c file
   InitEPwm1Gpio();
   Init_Port();



// Step 3. Clear all interrupts and initialize PIE vector table:
// Disable CPU interrupts
   DINT;

// Initialize the PIE control registers to their default state.
// The default state is all PIE interrupts disabled and flags
// are cleared.
// This function is found in the DSP2833x_PieCtrl.c file.
   InitPieCtrl();

// Disable CPU interrupts and clear all CPU interrupt flags:
   IER = 0x0000;
   IFR = 0x0000;

// Initialize the PIE vector table with pointers to the shell Interrupt
// Service Routines (ISR).
// This will populate the entire table, even if the interrupt
// is not used in this example.  This is useful for debug purposes.
// The shell ISR routines are found in DSP2833x_DefaultIsr.c.
// This function is found in DSP2833x_PieVect.c.
   InitPieVectTable();

// Interrupts that are used in this example are re-mapped to
// ISR functions found within this file.
   EALLOW;  // This is needed to write to EALLOW protected registers
   PieVectTable.EPWM1_INT = &epwm1_isr;
   EDIS;    // This is needed to disable write to EALLOW protected registers

// Step 4. Initialize all the Device Peripherals:
// This function is found in DSP2833x_InitPeripherals.c
// InitPeripherals();  // Not required for this example

// For this example, only initialize the ePWM

   EALLOW;
   SysCtrlRegs.PCLKCR0.bit.TBCLKSYNC = 0;
   EDIS;

   InitEPwm1Example();

   EALLOW;
   SysCtrlRegs.PCLKCR0.bit.TBCLKSYNC = 1;
   EDIS;


// Step 5. User specific code, enable interrupts:

// Enable CPU INT3 which is connected to EPWM1-3 INT:
   IER |= M_INT3;

// Enable EPWM INTn in the PIE: Group 3 interrupt 1-3
   PieCtrlRegs.PIEIER3.bit.INTx1 = 1;

// Enable global Interrupts and higher priority real-time debug events:
   EINT;   // Enable Global interrupt INTM
   ERTM;   // Enable Global realtime interrupt DBGM

// Step 6. IDLE loop. Just sit and loop forever (optional):
   for(;;)
   {
       asm("          NOP");
   }

}

interrupt void epwm1_isr(void)
{
     if((Up_Key==0)|(Down_Key==0)|(Direction_Key==0))
   {
	  Scan_Key();	
      Motor_Drive();
   }
   
   EPwm1Regs.ETCLR.bit.INT = 1;   //clear flag
   PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;
}



void InitEPwm1Example()
{
   EPwm1Regs.TBCTL.bit.CTRMODE = TB_COUNT_UP;  
   EPwm1Regs.TBPRD = EPWM1_TIMER_TBPRD;      
   EPwm1Regs.TBCTL.bit.PHSEN = TB_DISABLE;    
   EPwm1Regs.TBPHS.half.TBPHS = 0x0000;      
   EPwm1Regs.TBCTR = 0x0000;       
   EPwm1Regs.TBCTL.bit.HSPCLKDIV = TB_DIV2;  
   EPwm1Regs.TBCTL.bit.CLKDIV = TB_DIV2; 

   EPwm1Regs.CMPCTL.bit.SHDWAMODE = CC_SHADOW;
   EPwm1Regs.CMPCTL.bit.SHDWBMODE = CC_SHADOW;
   EPwm1Regs.CMPCTL.bit.LOADAMODE = CC_CTR_ZERO;
   EPwm1Regs.CMPCTL.bit.LOADBMODE = CC_CTR_ZERO;

   EPwm1Regs.CMPA.half.CMPA = EPWM1_MIN_CMPA;     
   EPwm1Regs.CMPB = EPWM1_MIN_CMPB;
   
   EPwm1Regs.AQCTLA.bit.ZRO = AQ_SET;            
   EPwm1Regs.AQCTLA.bit.CAU = AQ_CLEAR;

   EPwm1Regs.AQCTLB.bit.ZRO = AQ_CLEAR;
   EPwm1Regs.AQCTLB.bit.CBU = AQ_CLEAR;
   
   EPwm1Regs.ETSEL.bit.INTSEL = ET_CTR_ZERO;     
   EPwm1Regs.ETSEL.bit.INTEN = 1; 
   EPwm1Regs.ETPS.bit.INTPRD = ET_3RD; 


}

void Init_Port(void)
{
   EALLOW;   
   GpioCtrlRegs.GPAPUD.bit.GPIO16 = 1;   
   GpioCtrlRegs.GPAPUD.bit.GPIO17 = 1;   
   GpioCtrlRegs.GPAPUD.bit.GPIO12 = 1;   
   
   GpioCtrlRegs.GPAMUX2.bit.GPIO16 = 0;   
   GpioCtrlRegs.GPAMUX2.bit.GPIO17 = 0;   
   GpioCtrlRegs.GPAMUX1.bit.GPIO12 = 0;  

   GpioDataRegs.GPADAT.bit.GPIO16 = 1;  
   GpioDataRegs.GPADAT.bit.GPIO17 = 1;
   GpioDataRegs.GPADAT.bit.GPIO12 = 1;  

   GpioCtrlRegs.GPADIR.bit.GPIO16 = 0;  
   GpioCtrlRegs.GPADIR.bit.GPIO17 = 0;   
   GpioCtrlRegs.GPADIR.bit.GPIO12 = 0;
   GpioCtrlRegs.GPAQSEL1.all = 0x0000;     
   
   //74244-EN
   GpioCtrlRegs.GPAPUD.bit.GPIO26 = 0;   									// Enable pullup on GPIO27
   GpioDataRegs.GPASET.bit.GPIO26 = 1;   									// Load output latch
   GpioCtrlRegs.GPAMUX2.bit.GPIO26 = 0;  									// GPIO27 = GPIO
   GpioCtrlRegs.GPADIR.bit.GPIO26 = 1;   									// GPIO27 = output  
   GpioDataRegs.GPACLEAR.bit.GPIO26 = 1;
	
   EDIS;
} 
 
void Scan_Key(void)      
{
	unsigned int i;
	for(i=0;i<50000;i++);    //键盘消抖动
	if(Direction_Key==0)//扫描方向按键是否按下
	{
	 	EPwm1Regs.CMPA.half.CMPA = 0;//改变脉宽
	 	EPwm1Regs.CMPB = 0;//改变脉宽
    	if(Direction==0)
       	{  
   // 设置动作限定；首先默认为转动方向为反转，这时只有PWM1B输出占空比；
       		EPwm1Regs.AQCTLA.bit.ZRO = AQ_CLEAR;            // 计数到0时PWM1A输出低电平
       		EPwm1Regs.AQCTLA.bit.CAU = AQ_CLEAR;          // 递增计数时，发生比较寄存器A匹配时清除PWM1A输出

       		EPwm1Regs.AQCTLB.bit.ZRO = AQ_SET;            // 计数到0时PWM1B输出高电平
       		EPwm1Regs.AQCTLB.bit.CBU = AQ_CLEAR;          // 递增计数时，发生比较寄存器A匹配时清除PWM1B输出
	   		Direction=1;
	   	}
    	else
	   	{
        // 设置动作限定；首先默认为转动方向为正转，这时只有PWM1A输出占空比；
       		EPwm1Regs.AQCTLA.bit.ZRO = AQ_SET;            // 计数到0时PWM1A输出高电平
       		EPwm1Regs.AQCTLA.bit.CAU = AQ_CLEAR;          // 递增计数时，发生比较寄存器A匹配时清除PWM1A输出

       		EPwm1Regs.AQCTLB.bit.ZRO = AQ_CLEAR;            // 计数到0时PWM1B输出低电平
       		EPwm1Regs.AQCTLB.bit.CBU = AQ_CLEAR;          // 递增计数时，发生比较寄存器A匹配时清除PWM1B输出
	   		Direction=0;
	   	}
    	temp=0;
	}
	else
	{	
		if(Up_Key==0)
			Manage_Up();
		else if(Down_Key==0)
			Manage_Down();
	}			  
	while((Up_Key==0)|(Down_Key==0)|(Direction_Key==0));
}
 
void Manage_Up(void) //加
{
	if(temp!=3500)
		temp=temp+100;
}

void Manage_Down(void)//减
{
	if(temp!=0)
		temp=temp-100;
} 
 
void Motor_Drive(void) 
{
	EPwm1Regs.CMPA.half.CMPA = temp;//改变脉宽
	EPwm1Regs.CMPB = temp;//改变脉宽
}




//===========================================================================
// No more.
//===========================================================================
