//       $Boot_Table:
//
//         GPIO87   GPIO86     GPIO85   GPIO84
//          XA15     XA14       XA13     XA12
//           PU       PU         PU       PU
//        ==========================================
//            1        1          1        1    Jump to Flash
//            1        1          1        0    SCI-A boot
//            1        1          0        1    SPI-A boot
//            1        1          0        0    I2C-A boot
//            1        0          1        1    eCAN-A boot
//            1        0          1        0    McBSP-A boot
//            1        0          0        1    Jump to XINTF x16
//            1        0          0        0    Jump to XINTF x32
//            0        1          1        1    Jump to OTP
//            0        1          1        0    Parallel GPIO I/O boot
//            0        1          0        1    Parallel XINTF boot
//            0        1          0        0    Jump to SARAM	    <- "boot to SARAM"
//            0        0          1        1    Branch to check boot mode
//            0        0          1        0    Boot to flash, bypass ADC cal
//            0        0          0        1    Boot to SARAM, bypass ADC cal
//            0        0          0        0    Boot to SCI-A, bypass ADC cal
//                                              Boot_Table_End$
//
//		


#include "DSP2833x_Device.h"     
#include "DSP2833x_Examples.h"   

/****************函数声明*******************/ 
void s_delay(void);
void delay_loop(void);
void spi_xmit(Uint16 a);
void spi_fifo_init(void);
void spi_init(void);
void error(void);

//------------------------------------------------------------------------------------
Uint16 SegData[16]=		//"0"~"F" code of common anode 7-SegmentLED
{
	0xC0,		//0
	0xF9,		//1
	0xA4,		//2
	0xB0,		//3
	0x99,		//4
	0x92,		//5
	0x82,		//6
	0xF8,		//7
	0x80,		//8
	0x90,		//9
	0x88,		//A
	0x83,		//B
	0xC6,		//C
	0xA1,		//E
	0x86,		//E
	0x8E		//F
};

//------------------------------------------------------------------------------------------
void InitCS(void)
{                                         
	EALLOW;                               
	GpioCtrlRegs.GPBPUD.bit.GPIO60 = 0;   
	GpioCtrlRegs.GPBDIR.bit.GPIO60 = 1;   
	GpioDataRegs.GPBCLEAR.bit.GPIO60 = 1; 
	EDIS; 
}

void ShowChar(Uint16 s1, Uint16 s2, Uint16 s3, Uint16 s4)
{                                         
	Uint16 sdata=0;
	sdata=SegData[s1];
	sdata <<=8;
	sdata |=SegData[s2];
	spi_xmit(sdata);
	
	sdata=SegData[s3];
	sdata <<=8;
	sdata |=SegData[s4];
	spi_xmit(sdata);
	
	GpioDataRegs.GPBCLEAR.bit.GPIO60 = 1;
	s_delay();
	GpioDataRegs.GPBSET.bit.GPIO60 = 1;
}

void main(void)
{
   	Uint16 s1=1,s2=2,s3=3,s4=4;
   	InitSysCtrl();
	InitCS();
   	InitSpiaGpio();
   	DINT;

// 初始化PIE控制寄存器到他们的默认状态.
// 这个默认状态就是禁止PIE中断及清除所有PIE中断标志 
// 这个函数放在DSP280x_PieCtrl.c源文件里
   InitPieCtrl();

// 禁止CPU中断，清除CPU中断标志位
   IER = 0x0000;
   IFR = 0x0000;
   
// 初始化PIE中断向量表，并使其指向中断服务子程序（ISR）
// 这些中断服务子程序被放在了DSP280x_DefaultIsr.c源文件中
// 这个函数放在了DSP280x_PieVect.c源文件里面.
   InitPieVectTable();
	
// 步骤 4.初始化片内外设:
   spi_fifo_init();	  // 初始化Spi的FIFO
   spi_init();		  // 初始化SPI

// 步骤 5. 以下是用户编写的指定代码, 使能相关中断: 
			
   for(;;)
   {    
	  ShowChar(s1,s2,s3,s4);
	  s1++;
	  if(s1>15) s1=1;
	  s2++;
	  if(s2>15) s2=1;
	  s3++;
	  if(s3>15) s3=1;
	  s4++;
	  if(s4>15) s4=1;
	  delay_loop();
	  delay_loop();
   }
} 	


//延迟函数	

void s_delay()
{
    long      i;
    for (i = 0; i < 45000; i++) {} //
}

void delay_loop()
{
    long      i;
    for (i = 0; i < 4500000; i++) {} //
}

//测试错误停止
void error(void)
{
    asm("     ESTOP0");						// Test failed!! Stop!
    for (;;);
}
//初始化SPI函数
void spi_init()
{    
	SpiaRegs.SPICCR.all =0x000F;// SPI软件复位, 极性位为0（上降沿发送数据）, 每次移
	                            //进和移出16位字长度；禁止SPI内部回送（LOOKBACK）功能；
	SpiaRegs.SPICTL.all =0x0006; // 使能主机模式，正常相位，使能主机发送，禁止接收
	                            //溢出中断，禁止SPI中断；
                                   
	SpiaRegs.SPIBRR =0x007F;	//SPI波特率=25M/128	=195.3KHZ；							
    SpiaRegs.SPICCR.all =0x00CF;//停止SPI软件复位准备接收或发送；禁止回送模式； 
    SpiaRegs.SPIPRI.bit.FREE = 1;  // 自由运行     
}
//发送SPI数据
void spi_xmit(Uint16 a)
{
    SpiaRegs.SPITXBUF=a;
}    
//初始化SPI FIFO
void spi_fifo_init()										
{
    SpiaRegs.SPIFFTX.all=0xE040;//使能FIFO;清除发送中断标志位；禁止FIFO发送中断；
                                //发送中断级别定义为0；
    SpiaRegs.SPIFFRX.all=0x204f;//清除FF溢出标志位；清除溢出接受中断标志位；禁止
	                            //FF接受中断；接受中断级别为16；
    SpiaRegs.SPIFFCT.all=0x0;//SPITXBUF到移位寄存器传送不延迟；
}  

//===========================================================================
// No more.
//===========================================================================

