// DESCRIPTION:
//
//    Press K1 to accelerate the motor
//	  Press K2 to decelerate the motor
//	  Press K3 to change the direction of the motor
//###########################################################################

#include "DSP28x_Project.h"     // Device Headerfile and Examples Include File

#define LED1_OFF		GpioDataRegs.GPASET.bit.GPIO2 = 1							//LED D1 µãÁÁ
#define LED1_ON			GpioDataRegs.GPACLEAR.bit.GPIO2 = 1							//LED D1 Ï¨Ãð
#define LED2_OFF		GpioDataRegs.GPASET.bit.GPIO3 = 1							//LED D2 µãÁÁ
#define LED2_ON			GpioDataRegs.GPACLEAR.bit.GPIO3 = 1							//LED D2 Ï¨Ãð
#define LED3_OFF		GpioDataRegs.GPASET.bit.GPIO4 = 1							//LED D3 µãÁÁ
#define LED3_ON			GpioDataRegs.GPACLEAR.bit.GPIO4 = 1							//LED D3 Ï¨Ãð
#define LED4_OFF		GpioDataRegs.GPASET.bit.GPIO5 = 1							//LED D4 µãÁÁ
#define LED4_ON			GpioDataRegs.GPACLEAR.bit.GPIO5 = 1							//LED D4 Ï¨Ãð
#define LED5_OFF		GpioDataRegs.GPASET.bit.GPIO6 = 1							//LED D5 µãÁÁ
#define LED5_ON			GpioDataRegs.GPACLEAR.bit.GPIO6 = 1							//LED D5 Ï¨Ãð
#define LED6_OFF		GpioDataRegs.GPASET.bit.GPIO7 = 1							//LED D6 µãÁÁ
#define LED6_ON			GpioDataRegs.GPACLEAR.bit.GPIO7 = 1							//LED D6 Ï¨Ãð
#define LED7_OFF		GpioDataRegs.GPASET.bit.GPIO8 = 1							//LED D7 µãÁÁ
#define LED7_ON			GpioDataRegs.GPACLEAR.bit.GPIO8 = 1							//LED D7 Ï¨Ãð
#define LED8_OFF		GpioDataRegs.GPASET.bit.GPIO9 = 1							//LED D8 µãÁÁ
#define LED8_ON			GpioDataRegs.GPACLEAR.bit.GPIO9 = 1							//LED D8 Ï¨Ãð

#define DELAY_TIME	2000000															//ÑÓÊ±Ê±¼ä
/*****************************************************************************************************/

/*********************************************º¯ÊýÉùÃ÷************************************************/
void Init_LedGpio(void);
void delay(Uint32 t);
/*****************************************************************************************************/
void Init_LedGpio(void)
{

	EALLOW;   
	//LED D1 
	GpioCtrlRegs.GPAPUD.bit.GPIO2 = 0;   									// Enable pullup on GPIO11
    GpioDataRegs.GPASET.bit.GPIO2 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO2 = 0;  									// GPIO11 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO2  = 1;   									// GPIO11 = output    

	//LED D2
	GpioCtrlRegs.GPAPUD.bit.GPIO3 = 0;   									// Enable pullup on GPIO11
    GpioDataRegs.GPASET.bit.GPIO3 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO3 = 0;  									// GPIO11 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO3  = 1;   									// GPIO11 = output    
	//LED D3
	GpioCtrlRegs.GPAPUD.bit.GPIO4 = 0;   									// Enable pullup on GPIO11
    GpioDataRegs.GPASET.bit.GPIO4 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO4 = 0;  									// GPIO11 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO4 = 1;   									// GPIO11 = output   
	//LED D4    
    GpioCtrlRegs.GPAPUD.bit.GPIO5 = 0;   									// Enable pullup on GPIO11
    GpioDataRegs.GPASET.bit.GPIO5 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO5 = 0;  									// GPIO11 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO5 = 1;   									// GPIO11 = output    
	//LED D5	
	GpioCtrlRegs.GPAPUD.bit.GPIO6 = 0;   									// Enable pullup on GPIO11
    GpioDataRegs.GPASET.bit.GPIO6 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO6 = 0;  									// GPIO11 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO6 = 1;   									// GPIO11 = output    
	//LED D6	
	GpioCtrlRegs.GPAPUD.bit.GPIO7 = 0;   									// Enable pullup on GPIO11
    GpioDataRegs.GPASET.bit.GPIO7 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO7 = 0;  									// GPIO11 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO7 = 1;   									// GPIO11 = output    
	//LED D7	
	GpioCtrlRegs.GPAPUD.bit.GPIO8 = 0;   									// Enable pullup on GPIO11
    GpioDataRegs.GPASET.bit.GPIO8 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO8 = 0;  									// GPIO11 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO8 = 1;   									// GPIO11 = output    
	//LED D8	
	GpioCtrlRegs.GPAPUD.bit.GPIO9 = 0;   									// Enable pullup on GPIO11
    GpioDataRegs.GPASET.bit.GPIO9 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO9 = 0;  									// GPIO11 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO9 = 1;   									// GPIO11 = output   
    
    //LED CS	
	GpioCtrlRegs.GPAPUD.bit.GPIO27 = 0;   									// Enable pullup on GPIO27
    GpioDataRegs.GPASET.bit.GPIO27 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX2.bit.GPIO27 = 0;  									// GPIO27 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO27 = 1;   									// GPIO27 = output  
	GpioDataRegs.GPACLEAR.bit.GPIO27 = 1;	
	
    EDIS;      
 
} 
/*********************************************ÑÓÊ±º¯Êý************************************************/
void delay(Uint32 t)
{
	Uint32 i = 0;
	for (i = 0; i < t; i++);
}


void main(void)
{

// Step 1. Initialize System Control:
// PLL, WatchDog, enable Peripheral Clocks
// This example function is found in the DSP2833x_SysCtrl.c file.
   InitSysCtrl();
   
// Step 2. Initalize GPIO: 
// This example function is found in the DSP2833x_Gpio.c file and
// illustrates how to set the GPIO to it's default state.
   Init_LedGpio();					
// For this example use the following configuration:
//   Gpio_select();	  
// Step 3. Clear all interrupts and initialize PIE vector table:
// Disable CPU interrupts 
   DINT;

// Initialize PIE control registers to their default state.
// The default state is all PIE interrupts disabled and flags
// are cleared.  
// This function is found in the DSP2833x_PieCtrl.c file.
   InitPieCtrl();

// Disable CPU interrupts and clear all CPU interrupt flags:
   IER = 0x0000;
   IFR = 0x0000;

// Initialize the PIE vector table with pointers to the shell Interrupt 
// Service Routines (ISR).  
// This will populate the entire table, even if the interrupt
// is not used in this example.  This is useful for debug purposes.
// The shell ISR routines are found in DSP2833x_DefaultIsr.c.
// This function is found in DSP2833x_PieVect.c.
   InitPieVectTable();
  
// Write the program into flash, 
//------------------------------------------------------------------
   MemCopy(&RamfuncsLoadStart, &RamfuncsLoadEnd, &RamfuncsRunStart);
   InitFlash();
//-------------------------------------------------------------------

	
// Step 4. Initialize all the Device Peripherals:
// This function is found in DSP2833x_InitPeripherals.c
// InitPeripherals(); // Not required for this example
	
// Step 5. User specific code:


	while(1)												//ËÀÑ­»·
	{
		LED1_ON;											//LED1 D10 µãÁÁ
		delay(DELAY_TIME);									//ÑÓÊ±
		LED1_OFF;											//LED1 D10 Ï¨Ãð

		LED2_ON;											//LED2 D11 µãÁÁ
		delay(DELAY_TIME);									//ÑÓÊ±
		LED2_OFF;											//LED2 D11 Ï¨Ãð

		LED3_ON;											//LED3 D12 µãÁÁ
		delay(DELAY_TIME);									//ÑÓÊ±
		LED3_OFF;											//LED3 D12 Ï¨Ãð

		LED4_ON;											//LED4 D13 µãÁÁ
		delay(DELAY_TIME);									//ÑÓÊ±
		LED4_OFF;											//LED4 D13 Ï¨Ãð

		LED5_ON;											//LED5 D14 µãÁÁ
		delay(DELAY_TIME);									//ÑÓÊ±
		LED5_OFF;											//LED5 D14 Ï¨Ãð

		LED6_ON;											//LED6 D15 µãÁÁ
		delay(DELAY_TIME);									//ÑÓÊ±
		LED6_OFF;											//LED6 D15 Ï¨Ãð

		LED7_ON;											//LED7 D16 µãÁÁ
		delay(DELAY_TIME);									//ÑÓÊ±
		LED7_OFF;											//LED7 D16 Ï¨Ãð

		LED8_ON;											//LED8 D17 µãÁÁ
		delay(DELAY_TIME);									//ÑÓÊ±
		LED8_OFF;											//LED8 D17 Ï¨Ãð


	}
} 	


/*****************************************************************************************************/   
//===========================================================================
// No more.
//===========================================================================

