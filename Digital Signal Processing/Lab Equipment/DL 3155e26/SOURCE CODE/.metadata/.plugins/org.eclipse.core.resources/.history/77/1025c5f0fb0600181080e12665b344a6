// DESCRIPTION:
//
//		LCD1602 dispaly 
//		1st line: DE LORENZO   2rd line: DL 3155E26
//
//        RS--GPIO0 R/W--GND  EN--GPIO1  D0--GPIO2 
//        D1--GPIO3 D2--GPIO4 D3--GPIO5  D4--GPIO6 
//        D5--GPIO7 D6--GPIO8 D7--GPIO9 
//		
////###########################################################################	


#include "DSP28x_Project.h"     // Device Headerfile and Examples Include File

#define BUZZ_CLK_GENER			GpioDataRegs.GPATOGGLE.bit.GPIO10 = 1;		//Buzz control IO
#define DISABLE_TIMER1_INT		IER &= 0xFFFE;								//disable TIMER1
#define ENABLE_TIMER1_INT		IER |= M_INT1;								//enable TIMER1
#define BUZZ_OFF				GpioDataRegs.GPASET.bit.GPIO10 = 1;			//off buzz
// Prototype statements for functions found within this file.
interrupt void cpu_timer0_isr(void);
void Show(void);
void Buzz_Gpio_Init(void);
void Delay(Uint16 t);
/*****************************************************************************************************/

void Buzz_Gpio_Init(void)
{
	EALLOW;
    GpioCtrlRegs.GPAPUD.bit.GPIO10 = 0;   									// Enable pullup on GPIO35
    GpioDataRegs.GPASET.bit.GPIO10 = 1;  									 // Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO10 = 0;  									// GPIO10 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO10 = 1;   									// GPIO10 = output
    EDIS;
}
/*****************************************************************************************************/

Uint16 Musi[23]={		// buzz tone
				0,
				3816,	//L_do
				3496,	//L_re
				3215,	//L_mi
				2865,	//L_fa
				2551,	//L_so
				2272,	//L_la
				2024,	//L_xi
				1912,	//do
				1703,	//re
				1517,	//mi
				1432,	//fa
				1275,	//so
				1136,	//la
				1013,	//xi
				956,	//H_do
				851,	//H_re
				758,	//H_mi
				716,	//H_fa
				638,	//H_so
				568,	//H_la
				506,	//H_xi
				0xFF	//STOP
				};
				
Uint16 Song[]=	{5,5,6,5,8,7,5,5,6,5,8,7,5,5,5,10,8,7,6,11,10,8,9,8,22	};	//song: happy birthday			
Uint16 DT[]={2,2,5,4,6,8,2,2,5,6,6,9,4,2,5,4,6,12,2,2,5,6,8,12 };			
/*****************************************************************************************************/

void Delay(Uint16 t)														//function delay
{
	Uint32 i=0;
	Uint32 gain = 200000;													
	Uint32 base=0;								
	base=gain*t; 															
	for(i=0;i<=base;i++);
}
/*****************************************************************************************************/
void Show(void)
{
	Uint16 addr=0;
	while(1)
	{
		if(Musi[Song[addr]]==0xFF)									
		{
			return;															//over
		}
		else
		{
			StopCpuTimer0();												
			DISABLE_TIMER1_INT;												
			ConfigCpuTimer(&CpuTimer0, 150, Musi[Song[addr]+8]);			
			StartCpuTimer0();												
			ENABLE_TIMER1_INT;												
			Delay(DT[addr]);												
			StopCpuTimer0();												
			DISABLE_TIMER1_INT;												
			BUZZ_OFF;														
			Delay(8);														
			addr++;
		}
	}

}
/*****************************************************************************************************/

// Prototype statements for functions found within this file.
interrupt void cpu_timer0_isr(void);


void main(void)
{

// Step 1. Initialize System Control:
// PLL, WatchDog, enable Peripheral Clocks
// This example function is found in the DSP2833x_SysCtrl.c file.
   InitSysCtrl();

// Step 2. Initalize GPIO:
// This example function is found in the DSP2833x_Gpio.c file and
// illustrates how to set the GPIO to it's default state.
// InitGpio();  // Skipped for this example
    Buzz_Gpio_Init();

// Step 3. Clear all interrupts and initialize PIE vector table:
// Disable CPU interrupts
   DINT;

// Initialize the PIE control registers to their default state.
// The default state is all PIE interrupts disabled and flags
// are cleared.
// This function is found in the DSP2833x_PieCtrl.c file.
   InitPieCtrl();

// Disable CPU interrupts and clear all CPU interrupt flags:
   IER = 0x0000;
   IFR = 0x0000;

// Initialize the PIE vector table with pointers to the shell Interrupt
// Service Routines (ISR).
// This will populate the entire table, even if the interrupt
// is not used in this example.  This is useful for debug purposes.
// The shell ISR routines are found in DSP2833x_DefaultIsr.c.
// This function is found in DSP2833x_PieVect.c.
   InitPieVectTable();

// Interrupts that are used in this example are re-mapped to
// ISR functions found within this file.
   EALLOW;  // This is needed to write to EALLOW protected registers
   PieVectTable.TINT0 = &cpu_timer0_isr;


   EDIS;    // This is needed to disable write to EALLOW protected registers

// Step 4. Initialize the Device Peripheral. This function can be
//         found in DSP2833x_CpuTimers.c
   InitCpuTimers();   // For this example, only initialize the Cpu Timers

   ConfigCpuTimer(&CpuTimer0, 150, 50);

// To ensure precise timing, use write-only instructions to write to the entire register. Therefore, if any
// of the configuration bits are changed in ConfigCpuTimer and InitCpuTimers (in DSP2833x_CpuTimers.h), the
// below settings must also be updated.

// Step 5. User specific code, enable interrupts:


// Enable CPU int1 which is connected to CPU-Timer 0, CPU int13
// which is connected to CPU-Timer 1, and CPU int 14, which is connected
// to CPU-Timer 2:
   IER |= M_INT1;

// Enable TINT0 in the PIE: Group 1 interrupt 7
   PieCtrlRegs.PIEIER1.bit.INTx7 = 1;

// Enable global Interrupts and higher priority real-time debug events:
   EINT;   // Enable Global interrupt INTM
   ERTM;   // Enable Global realtime interrupt DBGM

// Step 6. IDLE loop. Just sit and loop forever (optional):
   while(1)
   {
		Show();    //play music
   }

}


interrupt void cpu_timer0_isr(void)			//TIMER1 ISR
{
   	CpuTimer0.InterruptCount++;
	BUZZ_CLK_GENER; 
   	PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}


//===========================================================================
// No more.
//===========================================================================
