// DESCRIPTION:
//
//		EEPROM R/W via IIC bus 
//		1st line: DE LORENZO   2rd line: DL 3155E26
//
//        RS--GPIO0 R/W--GND  EN--GPIO1  D0--GPIO2 
//        D1--GPIO3 D2--GPIO4 D3--GPIO5  D4--GPIO6 
//        D5--GPIO7 D6--GPIO8 D7--GPIO9 
//		
////###########################################################################	

#include "DSP2833x_Device.h"     // DSP2833x Headerfile Include File
#include "DSP2833x_Examples.h"   // DSP2833x Examples Include File

// Note: I2C Macros used in this example can be found in the 
// DSP280x_I2C_defines.h file
extern void writebyte(Uint16 addr,Uint16 data);
extern Uint16 readbyte(Uint16 addr);
extern void Eerom_Gpio_Init(void);
extern void delay(Uint16 time);

Uint16 TestOK=0;
Uint16 addr = 0;
Uint16 RecvBuf[16]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
Uint16 TranBuf[16]={0,1,2,3,4,5,6,7,8,9,0xA,0xB,0xC,0xD,0xE,0xF};
void main(void)
{
	Uint16 Errcnt=0;
// Step 1. Initialize System Control:
// PLL, WatchDog, enable Peripheral Clocks
// This example function is found in the DSP280x_SysCtrl.c file.
   InitSysCtrl();	 


// Step 2. Initalize GPIO: 
// This example function is found in the DSP280x_Gpio.c file and
// illustrates how to set the GPIO to it's default state.
   Eerom_Gpio_Init();	 

// Step 3. Clear all interrupts and initialize PIE vector table:
// Disable CPU interrupts 
   DINT;   

// Initialize PIE control registers to their default state.
// The default state is all PIE interrupts disabled and flags
// are cleared.  
// This function is found in the DSP280x_PieCtrl.c file.
   InitPieCtrl();			

// Disable CPU interrupts and clear all CPU interrupt flags:
   IER = 0x0000;
   IFR = 0x0000;

// Initialize the PIE vector table with pointers to the shell Interrupt 
// Service Routines (ISR).  
// This will populate the entire table, even if the interrupt
// is not used in this example.  This is useful for debug purposes.
// The shell ISR routines are found in DSP280x_DefaultIsr.c.
// This function is found in DSP280x_PieVect.c.
   InitPieVectTable();
   Errcnt=0;
   // Application loop
   for(;;)
   {
        for(addr = 0;addr<=0xf;addr++)
    	{    		
            writebyte(addr,TranBuf[addr]);					//write data to Eeprom
            delay(50000); 
            RecvBuf[addr] = readbyte(addr);					//read data from Eeprom
            delay(50000);
    	}
		for(addr = 0;addr<=0xf;addr++)						//Check whether the sendbuf and receivebuf are the same
		{
			if(TranBuf[addr]!=readbyte(addr))
			{
				Errcnt++;
			}
		}
   }   
}   



//===========================================================================
// No more.
//===========================================================================
