// TI File $Revision: /main/8 $
// Checkin $Date: April 21, 2008   15:42:43 $
//###########################################################################
//
// FILE:    Example_2833xGpioToggle.c
//
// TITLE:   DSP2833x Device GPIO toggle test program. 
//
// ASSUMPTIONS:
//
//    This program requires the DSP2833x header files.  
//
//    ALL OF THE I/O'S TOGGLE IN THIS PROGRAM.  MAKE SURE
//    THIS WILL NOT DAMAGE YOUR HARDWARE BEFORE RUNNING THIS
//    EXAMPLE.
//
//    Monitor desired pins on an oscilloscope.
//
//    As supplied, this project is configured for "boot to SARAM" 
//    operation.  The 2833x Boot Mode table is shown below.  
//    For information on configuring the boot mode of an eZdsp, 
//    please refer to the documentation included with the eZdsp,  
//
//       $Boot_Table:
//
//         GPIO87   GPIO86     GPIO85   GPIO84
//          XA15     XA14       XA13     XA12
//           PU       PU         PU       PU
//        ==========================================
//            1        1          1        1    Jump to Flash
//            1        1          1        0    SCI-A boot
//            1        1          0        1    SPI-A boot
//            1        1          0        0    I2C-A boot
//            1        0          1        1    eCAN-A boot
//            1        0          1        0    McBSP-A boot
//            1        0          0        1    Jump to XINTF x16
//            1        0          0        0    Jump to XINTF x32
//            0        1          1        1    Jump to OTP
//            0        1          1        0    Parallel GPIO I/O boot
//            0        1          0        1    Parallel XINTF boot
//            0        1          0        0    Jump to SARAM	    <- "boot to SARAM"
//            0        0          1        1    Branch to check boot mode
//            0        0          1        0    Boot to flash, bypass ADC cal
//            0        0          0        1    Boot to SARAM, bypass ADC cal
//            0        0          0        0    Boot to SCI-A, bypass ADC cal
//                                              Boot_Table_End$
//
// DESCRIPTION:
//
//     Three different examples are included. Select the example 
//     (data, set/clear or toggle) to execute before compiling using
//     the #define statements found at the top of the code.   
//
//
//     Toggle all of the GPIO PORT pins 
//        
//    The pins can be observed using Oscilloscope.  
// 
//
//###########################################################################
// $TI Release: DSP2833x/DSP2823x Header Files V1.20 $
// $Release Date: August 1, 2008 $
//###########################################################################

#include "DSP28x_Project.h"     // Device Headerfile and Examples Include File

/**************************************宏定义************************************************/
#define LED1_OFF		GpioDataRegs.GPASET.bit.GPIO2 = 1							//LED D1 点亮
#define LED1_ON			GpioDataRegs.GPACLEAR.bit.GPIO2 = 1							//LED D1 熄灭
#define LED2_OFF		GpioDataRegs.GPASET.bit.GPIO3 = 1							//LED D2 点亮
#define LED2_ON			GpioDataRegs.GPACLEAR.bit.GPIO3 = 1						//LED D2 熄灭
#define LED3_OFF		GpioDataRegs.GPASET.bit.GPIO4 = 1							//LED D3 点亮
#define LED3_ON			GpioDataRegs.GPACLEAR.bit.GPIO4 = 1							//LED D3 熄灭
#define LED4_OFF		GpioDataRegs.GPASET.bit.GPIO5 = 1							//LED D4 点亮
#define LED4_ON			GpioDataRegs.GPACLEAR.bit.GPIO5 = 1							//LED D4 熄灭
#define LED5_OFF		GpioDataRegs.GPASET.bit.GPIO6 = 1							//LED D5 点亮
#define LED5_ON			GpioDataRegs.GPACLEAR.bit.GPIO6 = 1							//LED D5 熄灭
#define LED6_OFF		GpioDataRegs.GPASET.bit.GPIO7 = 1							//LED D6 点亮
#define LED6_ON			GpioDataRegs.GPACLEAR.bit.GPIO7 = 1							//LED D6 熄灭
#define LED7_OFF		GpioDataRegs.GPASET.bit.GPIO8 = 1							//LED D7 点亮
#define LED7_ON			GpioDataRegs.GPACLEAR.bit.GPIO8 = 1							//LED D7 熄灭
#define LED8_OFF		GpioDataRegs.GPASET.bit.GPIO9 = 1							//LED D8 点亮
#define LED8_ON			GpioDataRegs.GPACLEAR.bit.GPIO9 = 1							//LED D8 熄灭

#define DELAY_TIME	2000000															//延时时间
/*****************************************************************************************************/

/*********************************************函数声明************************************************/
void Init_LedGpio(void);
void delay(Uint32 t);
/*****************************************************************************************************/
void Init_LedGpio(void)
{

	EALLOW;   
	//LED D1 
	GpioCtrlRegs.GPAPUD.bit.GPIO2 = 0;   									// Enable pullup on GPIO11
    GpioDataRegs.GPASET.bit.GPIO2 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO2 = 0;  									// GPIO11 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO2  = 1;   									// GPIO11 = output    

	//LED D2
	GpioCtrlRegs.GPAPUD.bit.GPIO3 = 0;   									// Enable pullup on GPIO11
    GpioDataRegs.GPASET.bit.GPIO3 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO3 = 0;  									// GPIO11 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO3  = 1;   									// GPIO11 = output    
	//LED D3
	GpioCtrlRegs.GPAPUD.bit.GPIO4 = 0;   									// Enable pullup on GPIO11
    GpioDataRegs.GPASET.bit.GPIO4 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO4 = 0;  									// GPIO11 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO4 = 1;   									// GPIO11 = output   
	//LED D4    
    GpioCtrlRegs.GPAPUD.bit.GPIO5 = 0;   									// Enable pullup on GPIO11
    GpioDataRegs.GPASET.bit.GPIO5 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO5 = 0;  									// GPIO11 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO5 = 1;   									// GPIO11 = output    
	//LED D5	
	GpioCtrlRegs.GPAPUD.bit.GPIO6 = 0;   									// Enable pullup on GPIO11
    GpioDataRegs.GPASET.bit.GPIO6 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO6 = 0;  									// GPIO11 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO6 = 1;   									// GPIO11 = output    
	//LED D6	
	GpioCtrlRegs.GPAPUD.bit.GPIO7 = 0;   									// Enable pullup on GPIO11
    GpioDataRegs.GPASET.bit.GPIO7 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO7 = 0;  									// GPIO11 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO7 = 1;   									// GPIO11 = output    
	//LED D7	
	GpioCtrlRegs.GPAPUD.bit.GPIO8 = 0;   									// Enable pullup on GPIO11
    GpioDataRegs.GPASET.bit.GPIO8 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO8 = 0;  									// GPIO11 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO8 = 1;   									// GPIO11 = output    
	//LED D8	
	GpioCtrlRegs.GPAPUD.bit.GPIO9 = 0;   									// Enable pullup on GPIO11
    GpioDataRegs.GPASET.bit.GPIO9 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX1.bit.GPIO9 = 0;  									// GPIO11 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO9 = 1;   									// GPIO11 = output   
    
    //LED CS	
	GpioCtrlRegs.GPAPUD.bit.GPIO27 = 0;   									// Enable pullup on GPIO27
    GpioDataRegs.GPASET.bit.GPIO27 = 1;   									// Load output latch
    GpioCtrlRegs.GPAMUX2.bit.GPIO27 = 0;  									// GPIO27 = GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO27 = 1;   									// GPIO27 = output  
	GpioDataRegs.GPACLEAR.bit.GPIO27 = 1;	
	
    EDIS;      
 
} 
/*********************************************延时函数************************************************/
void delay(Uint32 t)
{
	Uint32 i = 0;
	for (i = 0; i < t; i++);
}


void main(void)
{

// Step 1. Initialize System Control:
// PLL, WatchDog, enable Peripheral Clocks
// This example function is found in the DSP2833x_SysCtrl.c file.
   InitSysCtrl();
   
// Step 2. Initalize GPIO: 
// This example function is found in the DSP2833x_Gpio.c file and
// illustrates how to set the GPIO to it's default state.
   Init_LedGpio();					
// For this example use the following configuration:
//   Gpio_select();	  
// Step 3. Clear all interrupts and initialize PIE vector table:
// Disable CPU interrupts 
   DINT;

// Initialize PIE control registers to their default state.
// The default state is all PIE interrupts disabled and flags
// are cleared.  
// This function is found in the DSP2833x_PieCtrl.c file.
   InitPieCtrl();

// Disable CPU interrupts and clear all CPU interrupt flags:
   IER = 0x0000;
   IFR = 0x0000;

// Initialize the PIE vector table with pointers to the shell Interrupt 
// Service Routines (ISR).  
// This will populate the entire table, even if the interrupt
// is not used in this example.  This is useful for debug purposes.
// The shell ISR routines are found in DSP2833x_DefaultIsr.c.
// This function is found in DSP2833x_PieVect.c.
   InitPieVectTable();

//--------------------------]]]]]]]]]]]]]]]]]]]--------------------------------------------------------   
// 烧写FLASH更换cmd文件，添加下面2行代码,并添加DSP2833x_MeMCopy.c(DSP280x_CSMPasswords.asm)文件，重新编译
//------------------------------------------------------------------
   MemCopy(&RamfuncsLoadStart, &RamfuncsLoadEnd, &RamfuncsRunStart);
   InitFlash();
//-------------------------------------------------------------------
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

	
// Step 4. Initialize all the Device Peripherals:
// This function is found in DSP2833x_InitPeripherals.c
// InitPeripherals(); // Not required for this example
	
// Step 5. User specific code:


	while(1)												//死循环
	{
		LED1_ON;											//LED1 D10 点亮
		delay(DELAY_TIME);									//延时
		LED1_OFF;											//LED1 D10 熄灭

		LED2_ON;											//LED2 D11 点亮
		delay(DELAY_TIME);									//延时
		LED2_OFF;											//LED2 D11 熄灭

		LED3_ON;											//LED3 D12 点亮
		delay(DELAY_TIME);									//延时
		LED3_OFF;											//LED3 D12 熄灭

		LED4_ON;											//LED4 D13 点亮
		delay(DELAY_TIME);									//延时
		LED4_OFF;											//LED4 D13 熄灭

		LED5_ON;											//LED5 D14 点亮
		delay(DELAY_TIME);									//延时
		LED5_OFF;											//LED5 D14 熄灭

		LED6_ON;											//LED6 D15 点亮
		delay(DELAY_TIME);									//延时
		LED6_OFF;											//LED6 D15 熄灭

		LED7_ON;											//LED7 D16 点亮
		delay(DELAY_TIME);									//延时
		LED7_OFF;											//LED7 D16 熄灭

		LED8_ON;											//LED8 D17 点亮
		delay(DELAY_TIME);									//延时
		LED8_OFF;											//LED8 D17 熄灭


	}
} 	


/*****************************************************************************************************/   
//===========================================================================
// No more.
//===========================================================================

